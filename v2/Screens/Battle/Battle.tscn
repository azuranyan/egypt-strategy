[gd_scene load_steps=13 format=3 uid="uid://dy2jg0e1iws2m"]

[ext_resource type="Script" path="res://Screens/Battle/Battle.gd" id="1_nfufl"]
[ext_resource type="PackedScene" uid="uid://3m1eme6n2wed" path="res://Screens/Battle/CharacterList.tscn" id="2_6wey6"]

[sub_resource type="GDScript" id="GDScript_nspcd"]
script/source = "extends StateMachine

func transition_to(new_state: String, kwargs:={}) -> void:
	$Label.text = \"State: \" + new_state
	super.transition_to(new_state, kwargs)
"

[sub_resource type="GDScript" id="GDScript_wxbqf"]
script/source = "extends State

# Idle state

# we're just waiting for the load_map signal
func enter(kwargs:={}):
	print(\"enter idle\")

func exit():
	state_machine.grab_focus()
"

[sub_resource type="GDScript" id="GDScript_52mns"]
script/source = "extends State

# Init state

var battle: Battle


func enter(kwargs := {}) -> void:
	print(\"enter init\")
	battle = kwargs.battle
	
	# initialize context
	var context = Battle.Context.new()
	context.attacker = kwargs.attacker
	context.defender = kwargs.defender
	context.territory = kwargs.territory
	context.result = Battle.Result.Cancelled
	context.turns = 0
	context.current_turn = context.attacker
	
	battle.context = context
	
	# load territory map
	battle.load_map(\"res://Screens/Battle/maps/StartingZone.tscn\")
	
	# emit signal
	battle.battle_started.emit(context.attacker, context.defender, context.territory)
	
	# if defender is ai, allow them to set first
	var prep_queue := []
	if !context.defender.is_player_owned() and context.attacker.is_player_owned():
		prep_queue.append(context.defender)
		prep_queue.append(context.attacker)
	else:
		prep_queue.append(context.attacker)
		prep_queue.append(context.defender)
	
	#$Node2D.visible = true
	$Node2D/Label.text = \"%s vs %s\" % [context.attacker.leader.name, context.defender.leader.name]
	
	# start prep phase
	state_machine.transition_to(\"Prep\", {battle=battle, prep_queue=prep_queue})
"

[sub_resource type="LabelSettings" id="LabelSettings_c22gi"]
font_size = 30

[sub_resource type="GDScript" id="GDScript_jipoe"]
script/source = "extends State

# Prep state

var battle: Battle

var prep_queue: Array = []
var prep: Empire


func handle_gui_input(event: InputEvent) -> void:
	#state_machine.accept_event()
	pass
		
		
func handle_input(event: InputEvent) -> void:
	if heading_adjusted:
		if event is InputEventMouseMotion:
			var target = battle.map.world.screen_to_uniform(get_global_mouse_position(), true)
			
			if heading_adjusted.map_pos != target:
				heading_adjusted.face_towards(target)
			
		if event is InputEventMouseButton:
			if event.button_index == 2:
				heading_adjusted.heading = Unit.Heading.West
				
			if event.button_index == 3 and !event.pressed:
				heading_adjusted = null
			
	if selected:
		if event is InputEventMouseMotion:
			selected.map_pos = battle.map.world.screen_to_uniform(event.position) + selected_offset
			
			if can_spawn(selected, selected.map_pos):
				selected.animation.stop()
			else:
				selected.animation.play(\"highlight_red\")
			
		if event is InputEventMouseButton and !event.is_pressed() and event.button_index == 1:
			battle.character_list.get_button(selected).release()
	
	
func update(delta: float) -> void:
	pass
	
func physics_update(delta: float) -> void:
	pass
	
	
var test_units
var dragging := false
var selected: Unit
var selected_moved := false
var selected_original_pos := Vector2.ZERO
var selected_offset := Vector2.ZERO
var heading_adjusted: Unit

func enter(kwargs := {}) -> void:
	print(\"enter prep\")
	battle = kwargs.battle
	prep_queue.append_array(kwargs.prep_queue)
	
	prep = prep_queue.pop_front()
	
	$UI/Prep.text = \"Prep: %s\" % prep.leader.name
	
	if !prep.is_player_owned():
		auto_fill_slots()
		done()
	else:
		$UI.visible = true
		
		test_units = [
			battle.spawn_unit(\"Lysandra\", battle.context.attacker, \"\", Vector2(0, 1)),
			battle.spawn_unit(\"Maia\", battle.context.attacker, \"\", Vector2(0, 2)),
			battle.spawn_unit(\"Zahra\", battle.context.attacker, \"\", Vector2(0, 3)),
		]
		for u in test_units:
			battle.remove_unit(u) # we just used spawn() to create units cos we lazy, so now we remove it
			battle.character_list.add_unit(u)
		
		for o in battle.map.get_objects():
			if o.get_meta(\"spawn_point\", \"\") == \"player\":
				o.no_show = false
			
		player_fill_slots()
		
	battle.character_list.visible = true
	
		
func auto_fill_slots() -> void:
	# units = all_qualified_units_in_empire
	# fill_required_slots(units)
	# fill_slots(units)
	pass
	
func player_fill_slots():
	pass

func done() -> void:
	if prep_queue.is_empty():
		state_machine.transition_to(\"TurnEval\", {battle=battle})
	else:
		state_machine.transition_to(\"Prep\", {battle=battle, prep_queue=prep_queue})

func exit() -> void:
	$UI.visible = false
	prep = null
	
	battle.character_list.visible = false
	# we can't reset queue on exit because we're using it on done
	# doing so will pass an empty array on next prep call
	#prep_queue.clear()
	

func can_spawn(unit: Unit, pos: Vector2) -> bool:
	if !battle.map.is_inside_bounds(pos):
		return false
		
	var obj := battle.map.get_object_at(pos)
	
	return obj != null and is_unit_spawn_point(unit, obj)


func is_unit_spawn_point(unit: Unit, obj: MapObject) -> bool:
	if unit.unit_owner.is_player_owned():
		return obj.get_meta(\"spawn_point\", \"\") == \"player\"
	else:
		return obj.get_meta(\"spawn_point\", \"\") == \"ai\"


## Adds unit. Should be used within interactions.
func _add_unit(unit: Unit, pos: Vector2):
	battle.add_unit(unit, pos)
	
	var cb = [null, null]
	cb[0] = func(button: int):
		match button:
			1:
				if unit != selected:
					selected = unit
					selected_moved = true
					selected_original_pos = unit.map_pos
					selected_offset = unit.map_pos - battle.map.world.screen_to_uniform(get_global_mouse_position())
			2:
				_remove_unit(unit)
			3:
				heading_adjusted = unit
		
	cb[1] = func(button: int):
		pass
	
	# inject callbacks
	unit.button_pressed.connect(cb[0])
	unit.button_released.connect(cb[1])
	unit.set_meta(\"prep_phase_callbacks\", cb)
	

## Removes unit. Should be used within interactions.
func _remove_unit(unit: Unit):
	battle.remove_unit(unit)
	
	# remove callbacks
	var cb = unit.get_meta(\"prep_phase_callbacks\")
	if cb:
		unit.button_pressed.disconnect(cb[0])
		unit.button_released.disconnect(cb[1])
		unit.remove_meta(\"prep_phase_callbacks\")
	


func _on_character_list_unit_selected(unit: Unit, pos: Vector2):
	pos = battle.viewport.canvas_transform.affine_inverse() * pos
	
	selected = unit
	selected_moved = false
	selected_original_pos = Vector2.ZERO
	selected_offset = Vector2.ZERO
	
	if heading_adjusted:
		heading_adjusted.heading = Unit.Heading.West
		heading_adjusted = null
	
	_add_unit(selected, battle.map.world.screen_to_uniform(pos))
	
	unit.modulate = Color(1, 1, 1, 0.5)
	

func _on_character_list_unit_released(unit: Unit, pos: Vector2):
	pos = battle.viewport.canvas_transform.affine_inverse() * pos
	
	unit.snap()
		
	# remove the unit temporarily. if we can spawn there, add it again
	_remove_unit(unit)
	if can_spawn(unit, unit.map_pos):
		var unit2 := battle.map.get_object_at(unit.map_pos, false) as Unit
		if unit2:
			if selected_moved:
				unit2.map_pos = selected_original_pos
			else:
				_remove_unit(unit2)
		_add_unit(unit, unit.map_pos)
		
	
	unit.animation.stop()
	unit.modulate = Color(1, 1, 1, 1)
	
	selected = null
	if selected_moved:
		selected_moved = false


func _on_character_list_unit_dragged(unit: Unit, pos: Vector2):
	pos = battle.viewport.canvas_transform.affine_inverse() * pos
	
	var mp := battle.map.world.screen_to_uniform(pos)
	unit.map_pos = mp
	
	if can_spawn(unit, mp):
		unit.animation.stop()
	else:
		unit.animation.play(\"highlight_red\")
		
	unit.visible = true


func _on_character_list_unit_cancelled(unit: Unit):
	_remove_unit(unit)
	selected = null


func _on_character_list_unit_highlight_changed(unit: Unit, value: bool):
	if value:
		unit.animation.play(\"highlight\")
	else:
		unit.animation.stop()
"

[sub_resource type="GDScript" id="GDScript_18fha"]
script/source = "extends State

# TurnEval state

func enter(kwargs:={}):
	print(\"enter turn eval\")
"

[sub_resource type="GDScript" id="GDScript_t4niq"]
script/source = "extends State

# PlayerAction state

func enter(kwargs:={}):
	print(\"enter player action\")
"

[sub_resource type="GDScript" id="GDScript_nu43r"]
script/source = "extends State

# AIAction state

func enter(kwargs:={}):
	print(\"enter ai action\")
"

[sub_resource type="GDScript" id="GDScript_gihxl"]
script/source = "extends State

# End state

func enter(kwargs:={}):
	print(\"enter end\")

func exit():
	state_machine.release_focus()
"

[sub_resource type="LabelSettings" id="LabelSettings_6nd0a"]
font_size = 30

[node name="Battle" type="Control"]
layout_mode = 3
anchors_preset = 0
mouse_filter = 1
script = ExtResource("1_nfufl")

[node name="States" type="Control" parent="."]
process_priority = -1
z_index = 1
layout_mode = 3
anchors_preset = 0
focus_mode = 2
mouse_filter = 1
script = SubResource("GDScript_nspcd")
initial_state = NodePath("Idle")
metadata/_edit_group_ = true

[node name="Label" type="Label" parent="States"]
layout_mode = 0
offset_right = 40.0
offset_bottom = 23.0
text = "State: %s"

[node name="Idle" type="Node2D" parent="States"]
script = SubResource("GDScript_wxbqf")

[node name="Init" type="Node2D" parent="States"]
script = SubResource("GDScript_52mns")

[node name="Node2D" type="Node2D" parent="States/Init"]
visible = false

[node name="Label" type="Label" parent="States/Init/Node2D"]
offset_left = 58.0
offset_top = 34.0
offset_right = 187.0
offset_bottom = 79.0
size_flags_horizontal = 4
text = "%s vs %s"
label_settings = SubResource("LabelSettings_c22gi")

[node name="Prep" type="Node2D" parent="States"]
script = SubResource("GDScript_jipoe")

[node name="UI" type="Node2D" parent="States/Prep"]

[node name="Prep" type="Label" parent="States/Prep/UI"]
offset_left = 58.0
offset_top = 79.0
offset_right = 158.0
offset_bottom = 105.0
text = "Prep: %s"

[node name="TurnEval" type="Node2D" parent="States"]
script = SubResource("GDScript_18fha")

[node name="PlayerAction" type="Node2D" parent="States"]
script = SubResource("GDScript_t4niq")

[node name="AIAction" type="Node2D" parent="States"]
script = SubResource("GDScript_nu43r")

[node name="End" type="Node2D" parent="States"]
script = SubResource("GDScript_gihxl")

[node name="SubViewportContainer" type="SubViewportContainer" parent="."]
layout_mode = 0
offset_right = 1920.0
offset_bottom = 1080.0

[node name="Viewport" type="SubViewport" parent="SubViewportContainer"]
disable_3d = true
handle_input_locally = false
canvas_cull_mask = 4294966783
size = Vector2i(1920, 1080)
render_target_update_mode = 4

[node name="UI" type="Control" parent="."]
anchors_preset = 0
mouse_filter = 1

[node name="CharacterList" parent="UI" instance=ExtResource("2_6wey6")]
visible = false
offset_left = 1427.0
offset_top = 112.0
offset_right = 1877.0
offset_bottom = 687.0

[node name="Label" type="Label" parent="UI"]
layout_mode = 0
offset_left = 146.0
offset_top = 738.0
offset_right = 186.0
offset_bottom = 761.0
text = "Tile: Tree1
x = %s
y = %s"
metadata/_edit_use_anchors_ = true

[node name="OnTurn" type="Label" parent="UI"]
visible = false
layout_mode = 0
offset_left = 58.0
offset_top = 79.0
offset_right = 152.0
offset_bottom = 105.0
text = "on_turn: %s"

[node name="TurnNumber" type="Label" parent="UI"]
visible = false
layout_mode = 0
offset_left = 37.0
offset_top = 34.0
offset_right = 77.0
offset_bottom = 57.0
text = "Turn %s"
label_settings = SubResource("LabelSettings_6nd0a")

[connection signal="unit_cancelled" from="UI/CharacterList" to="States/Prep" method="_on_character_list_unit_cancelled"]
[connection signal="unit_dragged" from="UI/CharacterList" to="States/Prep" method="_on_character_list_unit_dragged"]
[connection signal="unit_highlight_changed" from="UI/CharacterList" to="States/Prep" method="_on_character_list_unit_highlight_changed"]
[connection signal="unit_released" from="UI/CharacterList" to="States/Prep" method="_on_character_list_unit_released"]
[connection signal="unit_selected" from="UI/CharacterList" to="States/Prep" method="_on_character_list_unit_selected"]
