[gd_scene load_steps=6 format=3 uid="uid://q8vgsodvjet4"]

[ext_resource type="PackedScene" uid="uid://bvn5edllk4u7g" path="res://Screens/Battle/map/WorldInstance.tscn" id="1_75fh4"]
[ext_resource type="Resource" uid="uid://m5o65p1f51ex" path="res://Screens/Battle/data/World_StartingZone.tres" id="2_0bm51"]
[ext_resource type="PackedScene" uid="uid://b6fvp0wup6fkc" path="res://Screens/Battle/map/Unit.tscn" id="3_b07tu"]

[sub_resource type="GDScript" id="GDScript_b0al4"]
script/source = "extends Node2D


var unit: Unit	

@onready var unit2: Unit	= $Unit
@onready var world := $WorldInstance.world as World


## TODO code to be put somewhere else, unit just trusts that the path provided
## are of right angles and not passing through objects
static func make_square_path(path: PackedVector2Array) -> PackedVector2Array:
	var re := PackedVector2Array()
	var prev := Vector2.ZERO
	
	re.append(prev)
	for p in path:
		if p.x != prev.x and p.y != prev.y:
			if p.x < p.y:
				re.append(Vector2(p.x, prev.y))
			else:
				re.append(Vector2(prev.x, p.y))
		re.append(p)
		prev = p
	return re


static func make_random_path(
		length: int,
		start: Vector2,
		min: Vector2,
		max: Vector2,
		square := true
		) -> PackedVector2Array:
	var re := PackedVector2Array()
	var prev := start
	
	re.append(prev)
	for i in length:
		var p := Vector2(randi_range(min.x, max.x), randi_range(min.y, max.y))
		if square:
			if p.x != prev.x and p.y != prev.y:
				if p.x < p.y:
					p = Vector2(p.x, prev.y)
				else:
					p = Vector2(prev.x, p.y)
		re.append(p)
		prev = p
	
	return re
	

func random_path(length: int) -> PackedVector2Array:
	if unit.walking:
		return make_random_path(length, unit.curve.get_point_out(unit.curve.point_count), Vector2.ZERO, world.map_size - Vector2i.ONE, true)
	else:
		return make_random_path(length, unit.map_pos, Vector2.ZERO, world.map_size - Vector2i.ONE, true)

# Called when the node enters the scene tree for the first time.
func _ready():
	unit = Unit.create(self, {
		unit_type = load(\"res://Screens/Battle/data/UnitType_Maia.tres\"),
		world = world,
	})
	
	unit2.world = world
	unit2.map_pos = Vector2(3, 3)
	unit2.unit_type = load(\"res://Screens/Battle/data/UnitType_Lysandra.tres\")
	
	
	$X.transform = world._world_to_screen_transform
	$X.position = world.uniform_to_screen(Vector2.ZERO)
	$Y.transform = world._world_to_screen_transform
	$Y.position = world.uniform_to_screen(Vector2.ZERO)
	
	unit.selectable = false
	#unit2.selectable = false
	

func _unhandled_input(event):
	if event is InputEventMouseMotion and not unit.walking:
		var mouse_pos: Vector2 = event.position
		var target := world.screen_to_uniform(mouse_pos)
		unit.face_towards(target)
	
	if event is InputEventKey and event.is_pressed():
		match event.keycode:
			KEY_Q:
				unit.hp -= 1
			KEY_E:
				unit.hp += 1
			

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	pass



func _on_unit_button_down(button):
	if button == 1:
		unit.walk_along(random_path(randi_range(1, 8)))
	print(button, \" button down\")


func _on_unit_button_up(button):
	if button == 2:
		unit.stop_walking()
	print(button, \" button up\")
"

[sub_resource type="Curve2D" id="Curve2D_x42wx"]

[node name="Test" type="Node2D"]
y_sort_enabled = true
script = SubResource("GDScript_b0al4")

[node name="WorldInstance" parent="." instance=ExtResource("1_75fh4")]
world = ExtResource("2_0bm51")

[node name="Unit" parent="." instance=ExtResource("3_b07tu")]
curve = SubResource("Curve2D_x42wx")

[node name="X" type="Line2D" parent="."]
visible = false
position = Vector2(1011.36, 251.987)
rotation = 0.522586
scale = Vector2(0.382509, 0.382509)
skew = 0.525625
points = PackedVector2Array(0, 0, 123.745, 0, 218, 0)
width = 2.0
default_color = Color(1, 0, 0, 1)

[node name="Y" type="Line2D" parent="."]
visible = false
position = Vector2(1011.36, 251.987)
rotation = 0.522586
scale = Vector2(0.382509, 0.382509)
skew = 0.525625
points = PackedVector2Array(0, 0, 0, 218)
width = 2.0
default_color = Color(0, 1, 0, 1)

[connection signal="button_down" from="Unit" to="." method="_on_unit_button_down"]
[connection signal="button_up" from="Unit" to="." method="_on_unit_button_up"]
